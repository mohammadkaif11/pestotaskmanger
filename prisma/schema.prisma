// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//pestoTaskManager and BlockChainManager have same URI
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}


model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    tasks         Task[]    // Add this line to connect User with Task

}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Task {
    id          String   @id @default(cuid())
    userId      String
    user        User?     @relation(fields: [userId], references: [id])
    title       String
    description String
    status      Int      @default(1) // 1-pending, 2-in-progress, 3-done
    createdDate DateTime @default(now())
    updatedDate DateTime @updatedAt
}

model Block {
  id          Int          @id @default(autoincrement())
  blockNumber String          @unique
  timestamp   DateTime
  transactions Transaction[]
}

model Transaction {
  id          Int      @id @default(autoincrement())
  txHash      String   
  blockNumber String
  txType      String
  status      String
  block       Block    @relation(fields: [blockNumber], references: [blockNumber])
}